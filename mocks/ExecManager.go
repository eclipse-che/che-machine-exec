// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/eclipse/che-machine-exec/api/model"
	websocket "github.com/gorilla/websocket"
	mock "github.com/stretchr/testify/mock"
)

// ExecManager is an autogenerated mock type for the ExecManager type
type ExecManager struct {
	mock.Mock
}

// Attach provides a mock function with given fields: id, conn
func (_m *ExecManager) Attach(id int, conn *websocket.Conn) error {
	ret := _m.Called(id, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *websocket.Conn) error); ok {
		r0 = rf(id, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Check provides a mock function with given fields: id
func (_m *ExecManager) Check(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: machineExec
func (_m *ExecManager) Create(machineExec *model.MachineExec) (int, error) {
	ret := _m.Called(machineExec)

	var r0 int
	if rf, ok := ret.Get(0).(func(*model.MachineExec) int); ok {
		r0 = rf(machineExec)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.MachineExec) error); ok {
		r1 = rf(machineExec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: execId
func (_m *ExecManager) Remove(execId int) {
	_m.Called(execId)
}

// Resize provides a mock function with given fields: id, cols, rows
func (_m *ExecManager) Resize(id int, cols uint, rows uint) error {
	ret := _m.Called(id, cols, rows)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint, uint) error); ok {
		r0 = rf(id, cols, rows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: kubeConfigParams
func (_m *ExecManager) CreateKubeConfig(kubeConfigParams *model.KubeConfigParams) error {
	ret := _m.Called(kubeConfigParams)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.KubeConfigParams) error); ok {
		r0 = rf(kubeConfigParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
